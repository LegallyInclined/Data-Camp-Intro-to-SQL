                                                      ALL SQL WORK SHOWN HERE - Certificate in Progress! (DATACAMP INTRO TO SQL)

Query to get the title and release year of films released in the 90s which were in French or Spanish and which took in more than $2M gross.

SELECT title, release_year
FROM films
WHERE (release_year >= 1990 AND release_year < 2000)
AND (language = 'French' OR language = 'Spanish')
AND (gross > 2000000);

Using BETWEEN with AND on the films data (4968 rows) to get the title and release year of all 
Spanish language films released between 1990 and 2000 (inclusive) with budgets over $100 million.

SELECT title, release_year
FROM films
WHERE release_year BETWEEN 1990 AND 2000
AND budget > 100000000
AND (language = 'Spanish' OR language = 'French');

Get the title and release year of all films released in 1990 or 2000 that were longer than two hours.

SELECT title, release_year
FROM films
WHERE (release_year = 1990 OR release_year=2000)
AND duration > 120; 

Get the title and language of all films which were in English, Spanish, or French.

SELECT title, language
FROM films
WHERE language IN ('English', 'Spanish', 'French');

Get the title and certification of all films with an NC-17 or R certification.

SELECT title, certification
FROM films
WHERE certification IN ('NC-17', 'R');

Get the names of people who are still alive, i.e. whose death date is missing

SELECT name
FROM people
WHERE deathdate IS NULL;

Get the title of every film which doesn't have a budget associated with it.

SELECT title 
FROM films 
WHERE budget IS NULL;

Get the number of films which don't have a language associated with them.

SELECT COUNT(*)
FROM films
WHERE language IS NULL;

Get the names of all people whose names begin with 'B'. 

SELECT name
FROM people
WHERE name LIKE 'B%';

Get the names of people whose names have 'r' as the second letter.

SELECT name
FROM people
WHERE name LIKE '_r%';

Get the names of people whose names don't start with A.

SELECT name 
FROM people
WHERE name NOT LIKE 'A%'; 

Use the SUM() function to get the total duration of all films.

SELECT SUM(duration)
FROM films; 

Get the average duration of all films.

SELECT AVG(duration)
FROM films; 

Get the duration of the shortest film.

SELECT MIN(duration)
FROM films; 

Get the duration of the longest film.

SELECT MAX(duration)
FROM films;

Use the SUM() function to get the total amount grossed by all films.

SELECT SUM(gross)
FROM films; 

Get the average amount grossed by all films.

SELECT AVG(gross)
FROM films; 

Get the amount grossed by the worst performing film.

SELECT MIN(gross)
FROM films; 

Get the amount grossed by the best performing film.

SELECT MAX(gross) 
FROM films; 

Use the SUM() function to get the total amount grossed by all films made in the year 2000 or later.

SELECT SUM(gross)
FROM films
WHERE release_year >= 2000; 

Get the average amount grossed by all films whose titles start with the letter 'A'.

SELECT AVG(gross)
FROM films
WHERE title LIKE 'A%'; 

Get the amount grossed by the worst performing film in 1994.

SELECT MIN(gross) 
FROM FILMS
WHERE release_year = 1994;

Get the amount grossed by the best performing film between 2000 and 2012, inclusive.

SELECT MAX(gross)
FROM films
WHERE release_year BETWEEN 2000 and 2012; 

What is the result of SELECT (10 / 3);?

3

Get the title and net profit (the amount a film grossed, minus its budget) for all films. Alias the net profit as net_profit.

SELECT title, (Gross-Budget) AS net_profit
FROM films; 

Get the title and duration in hours for all films. 
The duration is in minutes, so you'll need to divide by 60.0 to get the duration in hours. Alias the duration in hours as duration_hours

SELECT title, (duration/60.0) AS duration_hours
FROM films;

Get the average duration in hours for all films, aliased as avg_duration_hours.

SELECT AVG(duration) / 60.0 AS avg_duration_hours
FROM films; 

Get the percentage of people who are no longer alive. Alias the result as percentage_dead. Remember to use 100.0 and not 100!

SELECT count(deathdate) * 100.0 / count(*) AS percentage_dead
FROM people;

Get the number of years between the newest film and oldest film. Alias the result as difference.

SELECT MAX(release_year)- MIN(release_year) AS difference
FROM films;

Get the number of decades the films table covers. Alias the result as number_of_decades. The top half of your fraction should be enclosed in parentheses.

SELECT (MAX(release_year) - MIN(release_year)) / 10 AS number_of_decades
FROM films; 

Get the names of people from the people table, sorted alphabetically.

SELECT name
FROM people
ORDER BY name;

Get the names of people, sorted by birth date.

SELECT name
FROM people
ORDER BY birthdate;

Get the birth date and name for every person, in order of when they were born.

SELECT birthdate, name
FROM people
ORDER BY birthdate;

Get the title of films released in 2000 or 2012, in the order they were released.

SELECT title
FROM films
WHERE release_year=2000 or release_year=2012
ORDER BY release_year;

Get all details for all films except those released in 2015 and order them by duration.

SELECT *
FROM films
WHERE release_year<>2015
ORDER BY duration; 

Get the title and gross earnings for movies which begin with the letter 'M' and order the results alphabetically.

SELECT title, gross
FROM films
WHERE title LIKE 'M%'
ORDER BY title;

Get the IMDB score and film ID for every film from the reviews table, sorted from highest to lowest score.

SELECT imdb_score, film_id
FROM reviews
ORDER BY imdb_score DESC;

Get the title for every film, in reverse order.

SELECT title
FROM films
ORDER BY title DESC;

Get the title and duration for every film, in order of longest duration to shortest.

SELECT title, duration
FROM films
ORDER BY duration DESC;

Get the birth date and name of people in the people table, in order of when they were born and alphabetically by name.

SELECT birthdate, name
FROM people
ORDER BY birthdate, name;

Get the release year, duration, and title of films ordered by their release year and duration.

SELECT release_year, duration, title
FROM films
ORDER BY release_year, duration; 

Get certifications, release years, and titles of films ordered by certification (alphabetically) and release year.

SELECT certification, release_year, title
FROM films
ORDER BY certification, release_year; 

Get the names and birthdates of people ordered by name and birth date.

SELECT name, birthdate
FROM people
ORDER BY name, birthdate;

Get the release year and count of films released in each year.

SELECT release_year, count(*)
FROM films
GROUP BY release_year; 

Get the release year and largest budget for all films, grouped by release year.

SELECT release_year, MAX(budget)
FROM films
GROUP BY release_year; 

Get the IMDB score and count of film reviews grouped by IMDB score in the reviews table.

SELECT imdb_score, count(*)
FROM reviews
GROUP BY imdb_score; 

Get the release year and lowest gross earnings per release year.

SELECT release_year, MIN(gross)
FROM films
GROUP BY release_year; 

Get the language and total gross amount films in each language made.

SELECT language, SUM(gross)
FROM films
GROUP BY language; 

Get the country and total budget spent making movies in each country.

SELECT country, SUM(budget)
FROM films
GROUP BY country; 

Get the release year, country, and highest budget spent making a film for each year, for each country. Sort your results by release year and country.

SELECT release_year, country, MAX(budget)
FROM films
GROUP BY release_year, country
ORDER BY release_year, country; 

Get the country, release year, and lowest amount grossed per release year per country. Order your results by country and release year.

SELECT country, release_year, MIN(gross)
FROM films
GROUP BY country, release_year
ORDER BY country, release_year; 

In how many different years were more than 200 movies released? Answer = 13 

SELECT release_year
FROM films
GROUP BY release_year
HAVING COUNT(title) > 200;

Get the release year, budget and gross earnings for each film in the films table.
Modify your query so that only records with a release_year after 1990 are included.
Remove the budget and gross columns, and group your results by release year.
Modify your query to include the average budget and average gross earnings for the results you have so far. 
Alias the average budget as avg_budget; alias the average gross earnings as avg_gross.
Modify your query so that only years with an average budget of greater than $60 million are included.
Finally, modify your query to order the results from highest average gross earnings to lowest.

SELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross
FROM films
WHERE release_year > 1990
GROUP BY release_year
HAVING AVG(budget) > 60000000
ORDER BY AVG(gross) DESC;
















































